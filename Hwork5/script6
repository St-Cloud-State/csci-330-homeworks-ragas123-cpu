Script started on 2025-03-19 06:57:28+00:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="109" LINES="16"]
[0;32m@ragas123-cpu [0mâžœ [1;34m/workspaces/csci-330-homeworks-ragas123-cpu/Hwork5 [0;36m([1;31mmain[0;36m) [0m$ cat lisp[K[K[K[Kparser.lisp
(defun parse-G (tokens pos)
  "Parses G -> x | y | z | w"
  (let ((token (first tokens)))
    (if (member token '(x y z w))
        (values (cdr tokens) (1+ pos) (list 'G- token))
        (error "Unexpected symbol: ~A at position ~D. Expected 'x', 'y', 'z', or 'w'" token pos))))

(defun parse-E-prime (tokens pos)
  "Parses E' -> o G E' | Îµ"
  (if (and tokens (eq (first tokens) 'o))
      (multiple-value-bind (remaining pos g-node) (parse-G (rest tokens) (1+ pos))
        (multiple-value-bind (remaining pos e-node) (parse-E-prime remaining pos)
          (values remaining pos (list 'E'- 'o g-node e-node))))
      (values tokens pos 'Îµ)))  ; epsilon case

(defun parse-E (tokens pos)
  "Parses E -> G E'"
  (multiple-value-bind (remaining pos g-node) (parse-G tokens pos)
    (multiple-value-bind (remaining pos e-node) (parse-E-prime remaining pos)
      (values remaining pos (list 'E- g-node e-node)))))

(defun parse-L-prime (tokens pos)
  "Parses L' -> s L' | Îµ"
  (if (and tokens (eq (first tokens) 's))
      (multiple-value-bind (remaining pos l-node) (parse-L-prime (rest tokens) (1+ pos))
        (values remaining pos (list 'L'- 's l-node)))
      (values tokens pos 'Îµ)))  ; epsilon case

(defun parse-L (tokens pos)
  "Parses L -> s L'"
  (if (eq (first tokens) 's)
      (multiple-value-bind (remaining pos l-node) (parse-L-prime (rest tokens) (1+ pos))
        (values remaining pos (list 'L- 's l-node)))
      (error "Unexpected symbol: ~A at position ~D. Expected 's'" (first tokens) pos)))

(defun parse-S (tokens pos)
  "Parses S -> s | d L b"
  (let ((token (first tokens)))
    (cond
      ((eq token 's)
       (values (rest tokens) (1+ pos) (list 'S- 's)))  ; Match 's'
      ((eq token 'd)
       (multiple-value-bind (remaining pos l-node) (parse-L (rest tokens) (1+ pos))
         (if (eq (first remaining) 'b)
             (values (rest remaining) (1+ pos) (list 'S- 'd l-node 'b))
             (error "Unexpected symbol: ~A at position ~D. Expected 'b'" (first remaining) pos))))
      (t (error "Unexpected symbol: ~A at position ~D. Expected 's' or 'd'" token pos)))))

(defun parse-I-prime (tokens pos)
  "Parses I' -> e S | Îµ"
  (if (and tokens (eq (first tokens) 'e))
      (multiple-value-bind (remaining pos s-node) (parse-S (rest tokens) (1+ pos))
        (values remaining pos (list 'I'- 'e s-node)))
      (values tokens pos 'Îµ)))  ; epsilon case

(defun parse-I (tokens pos)
  "Parses I -> i E S I'"
  (if (not (eq (first tokens) 'i))
      (error "Unexpected symbol: ~A at position ~D. Expected 'i'" (first tokens) pos))
  (multiple-value-bind (remaining pos e-node) (parse-E (rest tokens) (1+ pos))
    (multiple-value-bind (remaining pos s-node) (parse-S remaining pos)
      (multiple-value-bind (remaining pos i-node) (parse-I-prime remaining pos)
        (if remaining
            (error "Unexpected symbol: ~A at position ~D. Expected end of input" (first remaining) pos))
        (format t "~&Parsing successful! String length: ~D~%Derivation: ~A~%" pos (list 'I- 'i e-node s-node i-node))
        (values remaining pos (list 'I- 'i e-node s-node i-node))))))

(defun grammar_parser (string)
  "Starts parsing from I with an initial position."
  (parse-I string 1))
[0;32m@ragas123-cpu [0mâžœ [1;34m/workspaces/csci-330-homeworks-ragas123-cpu/Hwork5 [0;36m([1;31mmain[0;36m) [0m$ sbcl --loa p[K[Kd parser.lisp
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* (grammar_parser '(i x o y s e s))

Parsing successful! String length: 8
Derivation: (I- I (E- (G- X) (E - O (G- Y) Î•)) (S- S) (I - E (S- S)))
NIL
8
(I- I (E- (G- X) (E - O (G- Y) Î•)) (S- S) (I - E (S- S)))
* (grammar_parser '(i x o z o y s e s))

Parsing successful! String length: 10
Derivation: (I- I (E- (G- X) (E - O (G- Z) (E - O (G- Y) Î•))) (S- S)
             (I - E (S- S)))
NIL
10
(I- I (E- (G- X) (E - O (G- Z) (E - O (G- Y) Î•))) (S- S) (I - E (S- S)))
* (grammar_parser '(i w s e s))

Parsing successful! String length: 6
Derivation: (I- I (E- (G- W) Î•) (S- S) (I - E (S- S)))
NIL
6
(I- I (E- (G- W) Î•) (S- S) (I - E (S- S)))
* (grammar_parser '(i x o y o z s e s))

Parsing successful! String length: 10
Derivation: (I- I (E- (G- X) (E - O (G- Y) (E - O (G- Z) Î•))) (S- S)
             (I - E (S- S)))
NIL
10
(I- I (E- (G- X) (E - O (G- Y) (E - O (G- Z) Î•))) (S- S) (I - E (S- S)))
* (grammar_parser '(i y o w o z o x s e s))

Parsing successful! String length: 12
Derivation: (I- I (E- (G- Y) (E - O (G- W) (E - O (G- Z) (E - O (G- X) Î•))))
             (S- S) (I - E (S- S)))
NIL
12
(I- I (E- (G- Y) (E - O (G- W) (E - O (G- Z) (E - O (G- X) Î•)))) (S- S)
 (I - E (S- S)))
* (grammar_parser '(i z o x o y o w o z s e s))

Parsing successful! String length: 14
Derivation: (I- I
             (E- (G- Z)
              (E - O (G- X) (E - O (G- Y) (E - O (G- W) (E - O (G- Z) Î•)))))
             (S- S) (I - E (S- S)))
NIL
14
(I- I (E- (G- Z) (E - O (G- X) (E - O (G- Y) (E - O (G- W) (E - O (G- Z) Î•)))))
 (S- S) (I - E (S- S)))
* (grammar_parser '(x i s))

debugger invoked on a SIMPLE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Unexpected symbol: X at position 1. Expected 'i'

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(PARSE-I (X I S) 1)
   source: (ERROR "Unexpected symbol: ~A at position ~D. Expected 'i'"
                  (FIRST TOKENS) POS)
0] 0

* (grammar_parser '(i o x y s e s)) 

debugger invoked on a SIMPLE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Unexpected symbol: O at position 2. Expected 'x', 'y', 'z', or 'w'

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(PARSE-G (O X Y S E S) 2)
   source: (ERROR
            "Unexpected symbol: ~A at position ~D. Expected 'x', 'y', 'z', or 'w'"
            TOKEN POS)
0] 0

* (grammar_parser '(i x y d b e s))

debugger invoked on a SIMPLE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Unexpected symbol: Y at position 3. Expected 's' or 'd'

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(PARSE-S (Y D B E S) 3)
   source: (ERROR "Unexpected symbol: ~A at position ~D. Expected 's' or 'd'"
                  TOKEN POS)
0] 0

* (grammar_parser '(i s d b e s))

debugger invoked on a SIMPLE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Unexpected symbol: S at position 2. Expected 'x', 'y', 'z', or 'w'

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(PARSE-G (S D B E S) 2)
   source: (ERROR
            "Unexpected symbol: ~A at position ~D. Expected 'x', 'y', 'z', or 'w'"
            TOKEN POS)
0] 0

* (grammar_parser '(i x o s e x)) 

debugger invoked on a SIMPLE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Unexpected symbol: S at position 4. Expected 'x', 'y', 'z', or 'w'

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(PARSE-G (S E X) 4)
   source: (ERROR
            "Unexpected symbol: ~A at position ~D. Expected 'x', 'y', 'z', or 'w'"
            TOKEN POS)
0] 0

* (grammar_parser '(i z o x y w s d b))

debugger invoked on a SIMPLE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Unexpected symbol: Y at position 5. Expected 's' or 'd'

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(PARSE-S (Y W S D B) 5)
   source: (ERROR "Unexpected symbol: ~A at position ~D. Expected 's' or 'd'"
                  TOKEN POS)
0] 0

* (grammar_parser '(i s e s d s b))

debugger invoked on a SIMPLE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  Unexpected symbol: S at position 2. Expected 'x', 'y', 'z', or 'w'

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(PARSE-G (S E S D S B) 2)
   source: (ERROR
            "Unexpected symbol: ~A at position ~D. Expected 'x', 'y', 'z', or 'w'"
            TOKEN POS)
0] 0

* (quit)
[0;32m@ragas123-cpu [0mâžœ [1;34m/workspaces/csci-330-homeworks-ragas123-cpu/Hwork5 [0;36m([1;31mmain[0;36m) [0m$ exit
exit

Script done on 2025-03-19 07:00:27+00:00 [COMMAND_EXIT_CODE="0"]
